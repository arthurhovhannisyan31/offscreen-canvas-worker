name: Deploy
on:
  push:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
      chosen-os:
        required: true
        type: choice
        options:
          - Ubuntu
          - MacOS
          - Windows
      file-path: # id of input
        description: "Path to test script"
        required: true
        default: "test-file.js"

env:
  PASSWORD_: "hello kitty"

jobs:
  validation:
    environment: development
    env:
      USERNAME: ${{ secrets.USERNAME }}
    runs-on: ubuntu-latest
#    outputs:
#      yarn_cache_dir_path: ${{ steps.yarn_cache_dir_path.outputs.yarn_cache_dir_path }}
    steps:
      - name: Test workflow commands
        id: test-workflow-commands
        run: |
          echo "::group::Info"
          echo "::notice file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
          echo "::warning file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
          echo "::error file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
          echo "::add-mask::Mona The Octocat"
          echo "::add-mask::${{ vars.PASSWORD }}"
          echo "::stop-commands::stopMarker"
          echo "Hello kitty"
          echo "::stopMarker::"
          echo "pwd=${{ vars.PASSWORD }}" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      - name: Check environments
        run: |
          echo "The pwd is ${{ steps.test-workflow-commands.outputs.pwd }}"
          echo "Environment variables DB_NAME": ${{ env.DB_NAME }}
          echo "Environment variables PASSWORD": ${{ vars.PASSWORD }}
          echo "Environment variables PORT": ${{ env.PORT }}
          echo "Environment variables USERNAME": ${{ env.USERNAME }}
      - name: Add dynamic environments
        run: |
          echo "My_ENV_VAR=123" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%D-%T')" >> $GITHUB_ENV
      - name: Use environment variable
        run: |
          echo "The value of My_ENV_VAR is $My_ENV_VAR"
          echo "Deploying at $BUILD_TIME"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - name: Enable yarn
        run: corepack enable
#      - name: Get yarn cache directory path
#        id: yarn_cache_dir_path
#        run: echo "yarn_cache_dir_path=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v4
        with:
#          path: ${{ steps.yarn_cache_dir_path.outputs.yarn_cache_dir_path }}
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: ${{ steps.restore-dependencies.outputs.cache-hit != 'true' }}
        run: yarn
      - name: Validate types
        run: yarn check-ts
      - name: Validate lint
        run: yarn check-lint
      - name: Validate tests
        id: validate-tests
        run: yarn test
      - name: Upload test report
        id: upload-test-report
        if: ${{ failure() && steps.validate-tests.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./coverage/
      - name: Generate summary
        run: |
          echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
  build:
    environment: production
    runs-on: ubuntu-latest
    needs: validation
    outputs:
      artifact-id: ${{ steps.upload-dist.outputs.artifact-id }}
      artifact-url: ${{ steps.upload-dist.outputs.artifact-url }}
    steps:
      - name: Check environments
        run: |
          echo "Environment variables DB_NAME": ${{ env.DB_NAME }}
          echo "Environment variables PASSWORD": ${{ env.PASSWORD }}
          echo "Environment variables PORT": ${{ env.PORT }}
          echo "Environment variables USERNAME": ${{ env.USERNAME }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - name: Enable yarn
        run: corepack enable
      - name: Restore dependencies
        id: restore-dependencies
        uses: actions/cache@v4
        with:
#          path: ${{ needs.validation.outputs.yarn_cache_dir_path }}
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: ${{ steps.restore-dependencies.outputs.cache-hit != 'true' }}
        run: yarn
      - name: Create env file
        run: |
          touch .env
          echo ${{ vars.VITE_ASSETS_PATH }}
          echo ASSET_PATH=${{ vars.VITE_ASSETS_PATH }} >> .env
          cat .env
      - name: Build
        run: yarn build
      - name: Publish file names
        run: find dist/assets/*.js -type f -execdir echo '{}' ';'
      - name: Upload artifacts
        id: upload-dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    uses: ./.github/workflows/reusable.yml
    with:
      artifact-name: dist-files
#    secrets:
#      some-secret: ${{ secrets.some-secret }}
#       required: false
  build-pages:
    needs: build
    uses: ./.github/workflows/publish-page.yml
  print-deploy-result:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy output
        run: echo ${{ needs.deploy.outputs.result }}
  report:
    needs: deploy
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Hello kitty"
          echo ${{ toJSON(github) }}
  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
      - name: Hello world action step
        id: hello
        uses:
